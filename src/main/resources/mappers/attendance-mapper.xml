<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >

<mapper namespace="attendanceMapper">
	<resultMap type="attendanceDto" id="attendanceMap">
		<id column="mem_no" property="memNo"/>
		<result column="start_time" property="startTime"/>
		<result column="end_time" property="endTime"/>
		<result column="work_time" property="workTime"/>
		<result column="type" property="type"/>
		<result column="att_date" property="attDate"/>
		<result column="att_content" property="attContent"/>
		<result column="targetMonth" property="targetMonth"/>
		<result column="workingDays" property="workingDays"/>
		<result column="monthWorkTime" property="monthWorkTime"/>
		<result column="avgWorkTime" property="avgWorkTime"/>
		<result column="totalWorkTime" property="totalWorkTime"/>
		<result column="totalWorkingDays" property="totalWorkingDays"/>
		<result column="mem_pwd" property="memPwd"/>
		<result column="dept_no" property="deptNo"/>
		<result column="dept_name" property="deptName"/>
		<result column="profile_img_path" property="profileImgPath"/>
		<result column="sig_img_path" property="sigImgPath"/>
		<result column="mem_gender" property="gender"/>
		<result column="mem_name" property="memName"/>
		<result column="mem_securityno" property="securityNo"/>
		<result column="mem_address" property="address"/>
		<result column="mem_email" property="memEmail"/>
		<result column="mem_grade" property="memGrade"/>
		<result column="grade_level" property="gradeLevel"/>
		<result column="mem_role" property="memRole"/>
		<result column="extension_number" property="extensionNumber"/>
		<result column="phone" property="phone"/>
		<result column="enroll_date" property="enrollDate"/>
		<result column="quit_date" property="quitDate"/>
		<result column="mem_salary" property="memSalary"/>
		<result column="account_no" property="accountNo"/>
		<result column="mem_incentive" property="memIncentive"/>
		<result column="mem_certificate" property="memCertificate"/>
		<result column="mem_welfare" property="memWelfare"/>
		<result column="authorization_level" property="authLevel"/>
		<result column="status" property="status"/>
		<result column="count_b" property="countB"/>
		<result column="count_c" property="countC"/>
		<result column="count_d" property="countD"/>
		<result column="count_e" property="countE"/>
		
		
	</resultMap>
	
	<resultMap type="leavepDto" id="leavepMap">
		<id column="leavep_no" property="leavepNo"/>
		<result column="mem_no" property="memNo"/>
		<result column="leavep_date" property="leavepDate"/>
		<result column="able_date" property="ableDate"/>
		<result column="pay" property="pay"/>
		<result column="used" property="used"/>
		<result column="left" property="left"/>
	
	</resultMap>
	
	<resultMap id="attachmentResultMap" type="AttachmentDto">
		<id column="file_no" property="fileNo"/>
		<result column="file_path" property="filePath"/>
		<result column="origin_name" property="originName"/>
		<result column="system_name" property="systemName"/>
		<result column="type" property="type"/>
		<result column="ref_no" property="refNo"/>
		<result column="upload_date" property="uploadDate"/>
	</resultMap>
	
	
	<resultMap id="documentResultMap" type="DocumentDto">
	
		<id column="docu_no" property="docuNo" />
		<result column="docu_category" property="docuCategory" />
		<result column="docu_title" property="docuTitle" />
		<result column="docu_content" property="docuContent" />
		<result column="mem_no" property="memNo" />
		<result column="dept_no" property="deptNo" />
		<result column="regist_date" property="registDate" />
		<result column="ref_mem_no" property="refMemNo" />
		<result column="ref_dept_no" property="refDeptNo" />
		<result column="mid_approver" property="midApprover" />
		<result column="mid_approve_date" property="midApproveDate" />
		<result column="mid_approver_sig" property="midApproverSig" />
		<result column="final_approver" property="finalApprover" />
		<result column="final_approve_date" property="finalApproveDate" />
		<result column="final_approver_sig" property="finalApproverSig" />
		<result column="approver_inf" property="approverInf" />
		<result column="process_reason" property="processReason" />
		<result column="status" property="status" />
		<result column="mid_approve_status" property="midApproveStatus" />
		<result column="final_approve_status" property="finalApproveStatus" />
		<result column="docu_cost" property="docuCost" />
		<result column="docu_remark" property="docuRemark" />
		<result column="docu_start_date" property="docuStartDate" />
		<result column="docu_end_date" property="docuEndDate" />
		<result column="docu_start_place" property="docuStartPlace" />
		<result column="docu_end_place" property="docuEndPlace" />
		<result column="docu_emergency_call" property="docuEmergencyCall" />
		<result column="docu_annual_leave" property="docuAnnualLeave" />
		<result column="docu_item" property="docuItem" />
		<result column="docu_transport_cost" property="docuTransportCost" />
		<result column="docu_fuel_cost" property="docuFuelCost" />
		<result column="docu_food_cost" property="docuFoodCost" />
		<result column="docu_room_cost" property="docuRoomCost" />
		<result column="docu_etc_cost" property="docuEtcCost" />
		<result column="docu_text" property="docuText" />
		<result column="docu_text_note" property="docuTextNote" />
		<result column="docu_count" property="docuCount" />
		<result column="count" property="count"/>
		<result column="mem_name" property="memName"/>
		<result column="dept_name" property="memDeptName"/>
		<result column="ref_dept_name" property="refDeptName"/>
		<result column="ref_mem_name" property="refMemName"/>
		<result column="docu_category_name" property="docuCategoryName" />
		<result column="mem_sig_path" property="memSig" />
		<result column="mem_grade" property="memGrade" />
		<result column="mem_phone" property="memPhone" />
		<result column="mid_reject_date" property="midRejectDate" />
		<result column="final_reject_date" property="finalRejectDate" />
		<result column="rNum" property="rowNum" />
		
		<collection resultMap="attachmentResultMap" property="attachList" />
		
	</resultMap>


	<!-- 출근 시간 등록 -->
	<insert id="insertWorktime">
		 insert into tb_attendance (mem_no, att_date, type)
   		 values (#{memNo}, sysdate, #{type})
	</insert>

<!-- 퇴근 시간 등록 -->
<update id="updateWorktime">
<![CDATA[
 update 
    tb_attendance
 set 
    end_time = CURRENT_TIMESTAMP,
    type = CASE
               WHEN (CURRENT_TIMESTAMP - start_time) < INTERVAL '4' HOUR THEN 'D' 
               WHEN (CURRENT_TIMESTAMP - start_time) < INTERVAL '8' HOUR THEN 'C'
               ELSE 'B'
           END
 where 
    mem_no = #{memNo}
    and trunc(att_date) = trunc(sysdate)
 ]]>
</update>

	
<!-- 근태 유형 조회 서비스 -->
	<select id="selectStatus" resultMap="attendanceMap">
    SELECT 
   		 start_time
   		,end_time
   		,work_time
   		,type
   		,att_date
   		,att_content
    FROM 
    	tb_attendance
    WHERE mem_no = #{memNo}
    AND trunc(att_date) = trunc(sysdate)
</select>
<!-- 근태 조회 서비스 (오늘 날짜) -->
	<select id="selectAttendance" resultMap="attendanceMap">
    SELECT 
   		 mem_no
      ,TO_CHAR(start_time,'HH24:MI:SS') start_time
   		,TO_CHAR(end_time,'HH24:MI:SS') end_time
   		,work_time
   		,type
   		,att_date
   		,att_content
    FROM 
    	tb_attendance
    WHERE mem_no = #{memNo}
    AND trunc(att_date) = trunc(sysdate)
    
</select>
<!-- 타입별 출석 데이터 카운트 조회 -->
 <select id="countAttendanceByType" resultMap="attendanceMap">
     SELECT 
         type, 
         COUNT(*) AS count 
     FROM 
         tb_attendance 
     WHERE 
         mem_no = #{memNo} 
     AND 
         trunc(att_date, 'MM') = trunc(sysdate, 'MM')
     AND 
         type IN ('B', 'C', 'D', 'E') 
     GROUP BY 
         type
 </select>
	
	<!-- 월별 근무 시간 및 평균 근무 시간 조회 -->
<select id="monthAttendanceTime" resultMap="attendanceMap">
<![CDATA[
 SELECT 
        TO_CHAR(att_date, 'YYYY-MM') AS month,
        COUNT(DISTINCT TO_CHAR(att_date, 'YYYY-MM-DD')) AS workingDays,
        TRUNC(SUM(
            CASE 
                WHEN EXTRACT(HOUR FROM start_time) < 12 AND EXTRACT(HOUR FROM end_time) >= 13 THEN
                    EXTRACT(DAY FROM (end_time - start_time)) * 24 * 3600 +
                    EXTRACT(HOUR FROM (end_time - start_time)) * 3600 +
                    EXTRACT(MINUTE FROM (end_time - start_time)) * 60 +
                    EXTRACT(SECOND FROM (end_time - start_time)) -
                    3600 
                ELSE
                    EXTRACT(DAY FROM (end_time - start_time)) * 24 * 3600 +
                    EXTRACT(HOUR FROM (end_time - start_time)) * 3600 +
                    EXTRACT(MINUTE FROM (end_time - start_time)) * 60 +
                    EXTRACT(SECOND FROM (end_time - start_time))
            END
        ) / 3600) AS monthWorkTime,
        ROUND(AVG(
            CASE 
                WHEN EXTRACT(HOUR FROM start_time) < 12 AND EXTRACT(HOUR FROM end_time) >= 13 THEN
                    EXTRACT(DAY FROM (end_time - start_time)) * 24 * 3600 +
                    EXTRACT(HOUR FROM (end_time - start_time)) * 3600 +
                    EXTRACT(MINUTE FROM (end_time - start_time)) * 60 +
                    EXTRACT(SECOND FROM (end_time - start_time)) -
                    3600 
                ELSE
                    EXTRACT(DAY FROM (end_time - start_time)) * 24 * 3600 +
                    EXTRACT(HOUR FROM (end_time - start_time)) * 3600 +
                    EXTRACT(MINUTE FROM (end_time - start_time)) * 60 +
                    EXTRACT(SECOND FROM (end_time - start_time))
            END
        ) / 3600, 1) AS avgWorkTime
    FROM 
        tb_attendance
    WHERE 
        mem_no = #{memNo} 
        AND TO_CHAR(att_date, 'YYYY-MM') = TO_CHAR(sysdate, 'YYYY-MM')
    GROUP BY 
        TO_CHAR(att_date, 'YYYY-MM')
    ORDER BY 
        month DESC
     ]]>
</select>

	<!-- 총 근무시간 및 총 근무일수 조회 -->
<select id="totalAttendanceTime" resultMap="attendanceMap">
<![CDATA[
SELECT 
    COUNT(DISTINCT TO_CHAR(att_date, 'YYYY-MM-DD')) AS totalWorkingDays,
    TRUNC(SUM(
        CASE 
            WHEN EXTRACT(HOUR FROM start_time) < 12 AND EXTRACT(HOUR FROM end_time) >= 13 THEN
                EXTRACT(DAY FROM (end_time - start_time)) * 24 * 3600 +
                EXTRACT(HOUR FROM (end_time - start_time)) * 3600 +
                EXTRACT(MINUTE FROM (end_time - start_time)) * 60 +
                EXTRACT(SECOND FROM (end_time - start_time)) -
                3600 
            ELSE
                EXTRACT(DAY FROM (end_time - start_time)) * 24 * 3600 +
                EXTRACT(HOUR FROM (end_time - start_time)) * 3600 +
                EXTRACT(MINUTE FROM (end_time - start_time)) * 60 +
                EXTRACT(SECOND FROM (end_time - start_time))
        END
    ) / 3600) AS totalWorkTime
FROM 
    tb_attendance
WHERE 
    mem_no = #{memNo} 
     ]]>
</select>

 <!-- Ajax 월별 근무 시간 및 평균 근무 시간 조회 -->
<select id="AjaxMonthAttendanceTime" resultMap="attendanceMap">
<![CDATA[
  SELECT 
        TO_CHAR(att_date, 'YYYY-MM') AS month,
        COUNT(DISTINCT TO_CHAR(att_date, 'YYYY-MM-DD')) AS workingDays,
        TRUNC(SUM(
            CASE 
                WHEN EXTRACT(HOUR FROM start_time) < 12 AND EXTRACT(HOUR FROM end_time) >= 13 THEN
                    EXTRACT(DAY FROM (end_time - start_time)) * 24 * 3600 +
                    EXTRACT(HOUR FROM (end_time - start_time)) * 3600 +
                    EXTRACT(MINUTE FROM (end_time - start_time)) * 60 +
                    EXTRACT(SECOND FROM (end_time - start_time)) -
                    3600 
                ELSE
                    EXTRACT(DAY FROM (end_time - start_time)) * 24 * 3600 +
                    EXTRACT(HOUR FROM (end_time - start_time)) * 3600 +
                    EXTRACT(MINUTE FROM (end_time - start_time)) * 60 +
                    EXTRACT(SECOND FROM (end_time - start_time))
            END
        ) / 3600) AS monthWorkTime,
        ROUND(AVG(
            CASE 
                WHEN EXTRACT(HOUR FROM start_time) < 12 AND EXTRACT(HOUR FROM end_time) >= 13 THEN
                    EXTRACT(DAY FROM (end_time - start_time)) * 24 * 3600 +
                    EXTRACT(HOUR FROM (end_time - start_time)) * 3600 +
                    EXTRACT(MINUTE FROM (end_time - start_time)) * 60 +
                    EXTRACT(SECOND FROM (end_time - start_time)) -
                    3600 
                ELSE
                    EXTRACT(DAY FROM (end_time - start_time)) * 24 * 3600 +
                    EXTRACT(HOUR FROM (end_time - start_time)) * 3600 +
                    EXTRACT(MINUTE FROM (end_time - start_time)) * 60 +
                    EXTRACT(SECOND FROM (end_time - start_time))
            END
        ) / 3600, 1) AS avgWorkTime
    FROM 
        tb_attendance
    WHERE 
        mem_no = #{memNo} 
        AND EXTRACT(YEAR FROM att_date) = #{currentYear}
        AND EXTRACT(MONTH FROM att_date) = #{currentMonth}
    GROUP BY 
        TO_CHAR(att_date, 'YYYY-MM')
    ORDER BY 
        month DESC
     ]]>
</select>

	<!-- Ajax 타입별 출석 데이터 카운트 조회 -->
 <select id="AjaxCountAttendanceByType" resultMap="attendanceMap">
     SELECT 
        type, 
        COUNT(*) AS count 
    FROM 
        tb_attendance 
    WHERE 
        mem_no = #{memNo} 
    AND 
        EXTRACT(YEAR FROM att_date) = #{currentYear}
    AND 
        EXTRACT(MONTH FROM att_date) = #{currentMonth}
    AND 
        type IN ('B', 'C', 'D', 'E') 
    GROUP BY 
        type
 </select>
		<!-- 연차 등록 -->
<insert id="insertDefaultLeave" parameterType="LeavepDto">
    INSERT INTO tb_leavepay (leavep_no,mem_no, able_date)
    VALUES (SEQ_LEAVEPNO.NEXTVAL,#{memNo}, #{ableDate})
</insert>

<!-- 연차 정보 등록 -->
<insert id="insertLeave" parameterType="DocumentDto">
 insert into tb_leave(leave_no, mem_no, leave_reason, app_date, start_date, end_date)
 VALUES (SEQ_LEAVENO.NEXTVAL,#{memNo}, #{docuContent}, #{registDate}, #{docuStartDate}, #{docuEndDate})
</insert>

<!-- 연차지급 정보 수정 -->
<update id="updateLeavep" parameterType="LeavepDto">
   UPDATE tb_leavepay
    SET 
        used = (
            SELECT (TO_DATE(#{endDate}, 'YYYY-MM-DD') + 1) - TO_DATE(#{startDate}, 'YYYY-MM-DD')
            FROM DUAL
        ),
        left = pay - (
            SELECT (TO_DATE(#{endDate}, 'YYYY-MM-DD') + 1) - TO_DATE(#{startDate}, 'YYYY-MM-DD')
            FROM DUAL
        )
    WHERE 
        mem_no = #{memNo}
        AND able_date = #{ableDate}
 
</update>
<!-- 잔여 연차 조회 -->
<select id="selectLeave" parameterType="LeavepDto" resultType="int" >
   select 
		 NVL(left, 0)
	from 
		 tb_leavepay
	where 
		 mem_no = #{memNo}
	   AND able_date = #{ableDate}
   
 </select>
 
 <!-- 휴가 신청 내역 리스트 조회 -->
	<select id="selectLeaveDocumentListCount" resultType="_int">
		 select 
        count(*)
    from tb_document d
    join tb_mem m on (d.mem_no = m.mem_no)
    where  
        (
            (d.mem_no = #{memNo})
            or (
                d.dept_no = #{deptNo}
                and '팀장' = #{memGrade}
                and d.status != '3'
            )
            or (
                d.status != '3'
                and (d.mid_approve_status = 'Y' or mid_approver is null) 
                and final_approver = #{memNo}
            )
            or (
                d.ref_mem_no = #{memNo}
                and d.status != '3'
            )
        )
        and d.docu_category = 3  -- 휴가 신청서 조건 추가
    order by docu_no desc
	</select>
	
	<select id="selectLeaveDocumentList" resultMap="documentResultMap">
    select ROW_NUMBER() OVER (ORDER BY d.docu_no DESC) AS rNum
    		 , docu_no 
         , dc.docu_category_name
         , docu_title
         , mem_name
         , dept_name
         , to_char(regist_date, 'YYYY-MM-DD') as regist_date
         , d.status
         , to_char(final_approve_date, 'YYYY-MM-DD') as final_approve_date
     from tb_document d
     left join tb_document_category dc on d.docu_category = dc.docu_category
		 left join tb_mem m on (d.mem_no = m.mem_no)
		 left join tb_department dp on (m.dept_no = dp.dept_no)
		 where 
		 			(
			 		 	 (
				      d.mem_no = #{memNo}
						 )
					or (
				    	d.dept_no = #{deptNo}
				    	and '팀장' = #{memGrade}
				    	and d.status != '3'
							)
					or (
							d.status != '3'
							and (d.mid_approve_status = 'Y' or mid_approver is null) 
							and final_approver = #{memNo}
							)
					or (
							d.ref_mem_no = #{memNo}
							and d.status != '3'
							)
					)
					 and d.docu_category = 3  -- 휴가 신청서 조건 추가
					 and m.mem_no = #{memNo}
		 order
		    by docu_no desc
	</select>

	<!-- 직원 근태 관리  -->
	<select id="AllCountAttendanceByType" resultMap="attendanceMap">
	<![CDATA[
		SELECT 
    m.mem_no,
    m.mem_pwd,
    d.dept_name,
    m.dept_no,
    m.profile_img_path,
    m.mem_gender,
    m.mem_name,
    m.mem_securityno,
    m.mem_address,
    m.sig_img_path,
    m.mem_email,
    m.mem_grade,
    m.mem_role,
    m.extension_number,
    m.phone,
    m.enroll_date,
    m.quit_date,
    m.mem_salary,
    m.account_no,
    m.mem_incentive,
    m.mem_certificate,
    m.mem_welfare,
    m.authorization_level,
    m.status,
    NVL(a.count_b, 0) AS count_b,
    NVL(a.count_c, 0) AS count_c,
    NVL(a.count_d, 0) AS count_d,
    NVL(a.count_e, 0) AS count_e,
    NVL(att.monthWorkTime, 0) AS monthWorkTime
FROM 
    tb_mem m
LEFT JOIN 
    tb_department d ON m.dept_no = d.dept_no
LEFT JOIN 
    (SELECT 
        mem_no,
        COUNT(CASE WHEN type = 'B' THEN 1 END) AS count_b,
        COUNT(CASE WHEN type = 'C' THEN 1 END) AS count_c,
        COUNT(CASE WHEN type = 'D' THEN 1 END) AS count_d,
        COUNT(CASE WHEN type = 'E' THEN 1 END) AS count_e
    FROM 
        tb_attendance
    WHERE
        trunc(att_date, 'MM') = trunc(sysdate, 'MM')
    GROUP BY 
        mem_no
    ) a ON m.mem_no = a.mem_no
LEFT JOIN 
    (SELECT 
        mem_no,
        TO_CHAR(att_date, 'YYYY-MM') AS month,
        TRUNC(SUM(
            CASE 
                WHEN EXTRACT(HOUR FROM start_time) < 12 AND EXTRACT(HOUR FROM end_time) >= 13 THEN
                    EXTRACT(DAY FROM (end_time - start_time)) * 24 * 3600 +
                    EXTRACT(HOUR FROM (end_time - start_time)) * 3600 +
                    EXTRACT(MINUTE FROM (end_time - start_time)) * 60 +
                    EXTRACT(SECOND FROM (end_time - start_time)) -
                    3600 
                ELSE
                    EXTRACT(DAY FROM (end_time - start_time)) * 24 * 3600 +
                    EXTRACT(HOUR FROM (end_time - start_time)) * 3600 +
                    EXTRACT(MINUTE FROM (end_time - start_time)) * 60 +
                    EXTRACT(SECOND FROM (end_time - start_time))
            END
        ) / 3600) AS monthWorkTime
    FROM 
        tb_attendance
    WHERE 
        trunc(att_date, 'MM') = trunc(sysdate, 'MM')
    GROUP BY 
        mem_no, TO_CHAR(att_date, 'YYYY-MM')
    ) att ON m.mem_no = att.mem_no
WHERE 
    m.status IN ('Y', 'R')
ORDER BY 
    m.mem_no ASC
    ]]>
		
	</select>
	
	<!-- 직원 근태 관리 - 검색  -->
	<select id="AllKeywordCountAttendanceByType" resultMap="attendanceMap">
	<![CDATA[
		SELECT 
    m.mem_no,
    m.mem_pwd,
    d.dept_name,
    m.dept_no,
    m.profile_img_path,
    m.mem_gender,
    m.mem_name,
    m.mem_securityno,
    m.mem_address,
    m.sig_img_path,
    m.mem_email,
    m.mem_grade,
    m.mem_role,
    m.extension_number,
    m.phone,
    m.enroll_date,
    m.quit_date,
    m.mem_salary,
    m.account_no,
    m.mem_incentive,
    m.mem_certificate,
    m.mem_welfare,
    m.authorization_level,
    m.status,
    NVL(a.count_b, 0) AS count_b,
    NVL(a.count_c, 0) AS count_c,
    NVL(a.count_d, 0) AS count_d,
    NVL(a.count_e, 0) AS count_e,
    NVL(att.monthWorkTime, 0) AS monthWorkTime
FROM 
    tb_mem m
LEFT JOIN 
    tb_department d ON m.dept_no = d.dept_no
LEFT JOIN 
    (SELECT 
        mem_no,
        COUNT(CASE WHEN type = 'B' THEN 1 END) AS count_b,
        COUNT(CASE WHEN type = 'C' THEN 1 END) AS count_c,
        COUNT(CASE WHEN type = 'D' THEN 1 END) AS count_d,
        COUNT(CASE WHEN type = 'E' THEN 1 END) AS count_e
    FROM 
        tb_attendance
    WHERE
        trunc(att_date, 'MM') = trunc(sysdate, 'MM')
    GROUP BY 
        mem_no
    ) a ON m.mem_no = a.mem_no
LEFT JOIN 
    (SELECT 
        mem_no,
        TO_CHAR(att_date, 'YYYY-MM') AS month,
        TRUNC(SUM(
            CASE 
                WHEN EXTRACT(HOUR FROM start_time) < 12 AND EXTRACT(HOUR FROM end_time) >= 13 THEN
                    EXTRACT(DAY FROM (end_time - start_time)) * 24 * 3600 +
                    EXTRACT(HOUR FROM (end_time - start_time)) * 3600 +
                    EXTRACT(MINUTE FROM (end_time - start_time)) * 60 +
                    EXTRACT(SECOND FROM (end_time - start_time)) -
                    3600 
                ELSE
                    EXTRACT(DAY FROM (end_time - start_time)) * 24 * 3600 +
                    EXTRACT(HOUR FROM (end_time - start_time)) * 3600 +
                    EXTRACT(MINUTE FROM (end_time - start_time)) * 60 +
                    EXTRACT(SECOND FROM (end_time - start_time))
            END
        ) / 3600) AS monthWorkTime
    FROM 
        tb_attendance
    WHERE 
        trunc(att_date, 'MM') = trunc(sysdate, 'MM')
    GROUP BY 
        mem_no, TO_CHAR(att_date, 'YYYY-MM')
    ) att ON m.mem_no = att.mem_no
WHERE 
    m.status IN ('Y', 'R')
     and (
        m.mem_name like '%' || #{keyword} || '%'
        or m.mem_no like '%' || #{keyword} || '%'
        or d.dept_name like '%' || #{keyword} || '%'
        or m.mem_grade like '%' || #{keyword} || '%'
        or m.mem_role like '%' || #{keyword} || '%'
        or m.mem_salary like '%' || #{keyword} || '%'
        or m.enroll_date like '%' || #{keyword} || '%'
        or m.status like '%' || #{keyword} || '%'
    			)
ORDER BY 
    m.mem_no ASC
    ]]>
	</select>
	
	
	
	
	
	
	
	</mapper>