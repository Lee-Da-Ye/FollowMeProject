<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="emailMapper">

	<resultMap id="emailResult" type="EmailDto">
		<id column="email_no" property="emailNo" />
		<result column="email_to" property="emailTo" />
		<result column="email_from" property="emailFrom" />
		<result column="subject" property="subject" />
		<result column="email_cc" property="cc" />
		<result column="text" property="text" />
		<result column="regist_date" property="registDate" />
		<result column="email_status" property="emailStatus" />
		<result column="forder" property="forder" />
		<result column="is_important" property="isImportant" />
		<result column="is_read" property="isRead" />
		
		<collection resultMap="attachmentResult" property="attachList" />
	</resultMap>
	
	<resultMap id="memberResult" type="MemberDto">
		<id column="mem_no" property="memNo" />
		<result column="dept_name" property="deptName" />
		<result column="mem_name" property="memName" />
		<result column="mem_email" property="memEmail" />
		<result column="status" property="status" />
	</resultMap>
	
	<resultMap id="attachmentResult" type="AttachmentDto">
		<id column="file_no" property="fileNo"/>
		<result column="file_path" property="filePath"/>
		<result column="origin_name" property="originName"/>
		<result column="system_name" property="systemName"/>
		<result column="type" property="type"/>
		<result column="ref_no" property="refNo"/>
		<result column="upload_date" property="uploadDate"/>
	</resultMap>

<!-- 메일 작성시 직원 메일 조회 -->
<select id="selectMemberList" resultMap="memberResult">
	select 
	       mem_no
	     , dept_name
	     , mem_name
	     , mem_email
	     , status
	  from tb_mem m
	  left join tb_department d on (m.dept_no = d.dept_no)
	 where status = 'Y'
	 order
      by mem_no asc
</select>

<!-- 보낸메일 db 저장 -->
<insert id="insertEmail">
	insert
	  into tb_email
	  (
	    email_no
	  , email_from
	  , email_to
	  , subject
	  , text
	  , forder
	  )
	  values
	  (
	    seq_emailno.nextval
	  , #{emailFrom}
	  , #{emailTo}
	  , #{subject}
	  , #{text}
	  , 'OUTBOX'
	  )
</insert>

<!-- 받은메일 db 저장 -->
<insert id="insertReceiveEmail">
	insert
	  into tb_email
	  (
	    email_no
	  , email_from
	  , email_to
	  , subject
	  , text
	  , forder
	  )
	  values
	  (
	    seq_emailno.nextval
	  , #{emailFrom}
	  , #{emailTo}
	  , #{subject}
	  , #{text}
	  , 'INBOX'
	  )
</insert>

<!-- 보낸메일의 첨부파일 -->
<insert id="insertAttachment">
		insert into tb_attachment 
		(
			file_no
		,	file_path
		,	origin_name
		,	system_name
		,	type
		,	ref_no
		) 
		values 
		(
			seq_fileno.nextval
		,	#{filePath}
		,	#{originName}
		,	#{systemName}
		,	#{type}
		,
			<choose>
				<when test="refNo == 0">
					seq_emailno.currval
				</when>
				<otherwise>
					#{refNo}
				</otherwise>
			</choose>
		)
</insert>

<!-- 보낸메일함 페이징 -->
<select id="selectOutBoxListCount" resultType="_int">
	select count(*)
	  from tb_email
	 where forder = 'OUTBOX'
	   and email_status = 'ACTIVE'
</select>

<!-- 보낸메일함 조회 -->
<select id="selectOutBoxList" resultMap="emailResult">
	select
	       email_no
	     , email_from
	     , email_to
	     , subject
	     , text
	     , to_char(regist_date, 'YYYY.MM.DD HH24:MI') regist_date
	     , email_status
	     , forder
	     , is_important
	     , is_read
	  from tb_email
	 where forder = 'OUTBOX'
	   and email_from = 'followme180624@gmail.com'
	 order
	    by regist_date desc
</select>

<!-- 선택 메일 휴지통으로 이동 -->
<update id="updateMailStatusTrash">
	 update tb_email
	    set forder = 'TRASH'
	  where email_no in
	  <foreach item="checkMail" collection="array" open="(" separator="," close=")">
		 		#{checkMail}
		 </foreach>
</update>

<!-- 메일 상세조회  -->
<select id="selectSendMail" resultMap="emailResult">
	select
	       email_no
	     , email_from
	     , email_to
	     , subject
	     , text
	     , to_char(regist_date, 'YYYY.MM.DD HH24:MI') regist_date
	     , file_no
	     , file_path
	     , system_name
	     , origin_name
	  from tb_email
	  left join tb_attachment on (type = 'E' and ref_no = email_no)
	 where email_status = 'ACTIVE'
	   and email_no = #{no}
</select>

<!-- 상세페이지에서 휴지통으로 이동 -->
<update id="updateDetailMailTrash">
	update tb_email
	   set forder = 'TRASH'
	 where email_no = #{no}
</update>


<!-- 받은메일 페이징 -->
<select id="selectInBoxListCount" resultType="_int">
	select count(*)
	  from tb_email
	 where forder = 'INBOX'
	   and email_status = 'ACTIVE'
</select>

<!-- 받은메일 조회 -->
<select id="selectInBoxList" resultMap="emailResult">
	select
	       email_no
	     , email_from
	     , email_to
	     , subject
	     , text
	     , to_char(regist_date, 'YYYY.MM.DD HH24:MI') regist_date
	     , email_status
	     , forder
	     , is_important
	     , is_read
	  from tb_email
	 where forder = 'INBOX'
	   and email_to = 'followme180624@gmail.com'
	 order
	    by regist_date desc
</select>

<!-- 휴지통 페이징 -->
<select id="selectRecycleBinListCount" resultType="_int">
	select count(*)
	  from tb_email
	 where forder = 'TRASH'
	   and email_status = 'ACTIVE'
</select>

<!-- 휴지통 조회 -->
<select id="selectRecycelBinList" resultMap="emailResult">
	select
	       email_no
	     , email_from
	     , email_to
	     , subject
	     , text
	     , to_char(regist_date, 'YYYY.MM.DD HH24:MI') regist_date
	     , email_status
	     , forder
	     , is_important
	     , is_read
	  from tb_email
	 where forder = 'TRASH'
	   and email_status = 'ACTIVE'
	 order
	    by regist_date desc
</select>

<!-- 휴지통에 있는 선택메일 복구 -->
<update id="updateBackUpMails">
	update tb_email
	   set forder = #{forder}
	 where email_no = #{emailNo}
</update>

<!-- 메일 전체 삭제  -->
<delete id="deleteAllMails">
	delete 
	  from tb_email
	 where forder = 'TRASH'
</delete>

<!-- 읽은 메일 상태 변경 -->
<update id="updateReadMail">
	update tb_email
	   set is_read = 1
	 where email_no = #{no}
</update>

</mapper>
