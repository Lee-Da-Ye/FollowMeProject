<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="memberMapper">
  
  <resultMap id="memberResult" type="MemberDto">
		<id column="mem_no" property="memNo"/>
		<result column="mem_pwd" property="memPwd"/>
		<result column="dept_no" property="deptNo"/>
		<result column="dept_name" property="deptName"/>
		<result column="profile_img_path" property="profilImgPath"/>
		<result column="mem_gender" property="gender"/>
		<result column="mem_name" property="memName"/>
		<result column="mem_securityno" property="securityNo"/>
		<result column="mem_address" property="address"/>
		<result column="mem_email" property="memEmail"/>
		<result column="mem_grade" property="memGrade"/>
		<result column="mem_role" property="memRole"/>
		<result column="extension_number" property="extensionNumber"/>
		<result column="phone" property="phone"/>
		<result column="enroll_date" property="enrollDate"/>
		<result column="quit_date" property="quitDate"/>
		<result column="mem_salary" property="memSalary"/>
		<result column="account_no" property="accountNo"/>
		<result column="sig_no" property="sigNo"/>
		<result column="mem_incentive" property="memIncentive"/>
		<result column="mem_certificate" property="memCertificate"/>
		<result column="mem_welfare" property="memWelfare"/>
		<result column="authorization_level" property="authLevel"/>
		<result column="status" property="status"/>
	</resultMap>
	
	<resultMap id="licenseResult" type="LicenseDto">
		<id column="lic_no" property="licNo"/>
		<result column="mem_no" property="memNo"/>
		<result column="lic_name" property="licName"/>
		<result column="lic_confirmno" property="licConfirmNo"/>
		<result column="issued_date" property="issuedDate"/>
		<result column="lic_agency" property="licAgency"/>
	</resultMap>
	
	<resultMap id="accountResult" type="AccountDto">
		<id column="account_no" property="accountNo"/>
		<result column="bank" property="bankName"/>
		<result column="bank_account_no" property="bankAccountNo"/>
		<result column="account_holder" property="accountHolder"/>
	</resultMap>
  
  <!-- 로그인용 (암호화 적용)-->
  <select id="selectMember" resultMap="memberResult">
		select
			 	 mem_no, mem_pwd, dept_name,
			 	 profile_img_path, mem_gender, 
			 	 mem_name, mem_securityno,
			 	 mem_address, 
			 	 mem_email, mem_grade, mem_role,
			 	 extension_number, phone, 
			 	 enroll_Date, quit_date, mem_salary,
			 	 account_no, sig_no, 
			 	 mem_incentive, mem_certificate, mem_welfare,
			 	 authorization_level, status
			from tb_mem
			left join tb_department on (tb_mem.dept_no = tb_department.dept_no)
		 where status = 'Y'
		   and mem_no = #{memNo}
	</select>
	
	<select id="memEmailCheck" resultMap="memberResult">
		select
			 	 mem_no, mem_pwd, dept_name,
			 	 profile_img_path, mem_gender, 
			 	 mem_name, mem_securityno,
			 	 mem_address, 
			 	 mem_email, mem_grade, mem_role,
			 	 extension_number, phone, 
			 	 enroll_Date, quit_date, mem_salary,
			 	 account_no, sig_no, 
			 	 mem_incentive, mem_certificate, mem_welfare,
			 	 authorization_level, status
			from tb_mem
			left join tb_department on (tb_mem.dept_no = tb_department.dept_no)
		 where status = 'Y'
		   and mem_email = #{memEmail}
	</select>
	
	<!-- 임시 비밀번호(암호화된 것) 발급 후 사원정보 업데이트 (임시 로그인용) -->
  <update id="updateTempPwd">
  	update
  				tb_mem
  		 set
  		 		mem_pwd = #{hashedPassword}
  	 where
  	 			mem_no = #{memNo}
  </update>
  
  <!-- 사용자가 입력한 이메일로 변경 (업데이트) -->
  <update id="changeEmail">
  	update
  				tb_mem
  		 set
  		  	mem_email = #{memNewEmail}
  	 where
  	      mem_no = #{memNo}
  </update>
  
  <!-- 사용자가 입력한 이메일 중복확인용 -->
  <select id="memEmailDoubleCheck" resultMap="memberResult">
  	select
			 	 mem_no, mem_pwd, dept_name,
			 	 profile_img_path, mem_gender, 
			 	 mem_name, mem_securityno,
			 	 mem_address, 
			 	 mem_email, mem_grade, mem_role,
			 	 extension_number, phone, 
			 	 enroll_Date, quit_date, mem_salary,
			 	 account_no, sig_no, 
			 	 mem_incentive, mem_certificate, mem_welfare,
			 	 authorization_level, status
			from tb_mem
			left join tb_department on (tb_mem.dept_no = tb_department.dept_no)
		 where status = 'Y'
		   and mem_email = #{newEmail}
  </select>
  
  <!-- 사용자의 자격증 정보를 조회하는용 -->
  <select id="selectLicense" resultMap="licenseResult">
  	select
        lic_no, m.mem_no, lic_name, lic_confirmno, issued_date, lic_agency
 		 from  tb_license l
  	 left join tb_mem m on (m.mem_no = l.mem_no)
  	where m.status = 'Y'
  	  and m.mem_no = #{memNo}
  	order by lic_no asc
  </select>
  
  <!--  사용자의 계좌정보를 조회하는용 -->
  <select id="selectAccount" resultMap="accountResult">
  	select account_no, bank, bank_account_no, account_holder
		  from tb_account
		 where account_no = (select account_no 
		                       from tb_mem
		                      where mem_no = #{memNo})
  </select>
  
  <!-- 사용자의 자격증 정보를 수정하는용 -->
  <update id="updateLicense">
  	update 
  				tb_license
  		 set
  		    lic_name = #{licName},
  		    lic_confirmno = #{licConfirmNo},
  		    issued_date = #{issuedDate},
  		    lic_agency = #{licAgency}
  	 where
  	 			lic_no = #{licNo}
  </update>
 
 	<!-- 사용자의 자격증 정보를 삭제하는용 -->
 	<delete id="deleteLicense">
 		delete
 		 			from tb_license
 		     where lic_no = #{licNo}
 	</delete>
  
</mapper>
